{"version":3,"sources":["components/images/logo.svg","components/js/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","href","src","logo","alt","onClick","menuBtn","document","querySelector","classList","remove","action","type","placeholder","toggle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,kC,iMC+D5BC,MAzDf,WAaE,OACE,4BAAQC,UAAU,UAChB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,eAAeC,KAAK,IACjC,yBAAKC,IAAKC,IAAMH,UAAU,mBAAmBI,IAAI,SACjD,0BAAMJ,UAAU,qBAAhB,WAEF,yBAAKA,UAAU,gBACb,uBAAGA,UAAU,4BAA4BK,QAfnD,WACE,IAAIC,EAAUC,SAASC,cAAc,mBAC1BD,SAASC,cAAc,YAC7BC,UAAUC,OAAO,WACtBJ,EAAQG,UAAUC,OAAO,eAYf,uCACA,uBAAGV,UAAU,iBAEf,yBAAKA,UAAU,cACb,uBAAGA,UAAU,yBAAyBC,KAAK,KAA3C,SACA,uBAAGD,UAAU,kBAAkBC,KAAK,KAApC,WACA,uBAAGD,UAAU,kBAAkBC,KAAK,KAApC,SACA,uBAAGD,UAAU,kBAAkBC,KAAK,KAApC,UAGJ,yBAAKD,UAAU,kBACb,yBAAKA,UAAU,0BACb,uBAAGA,UAAU,wBAEf,0BAAMW,OAAO,IAAIX,UAAU,UACzB,2BAAOA,UAAU,gBAAgBY,KAAK,OAAOC,YAAY,aACzD,uBAAGb,UAAU,yBAGjB,uBAAGA,UAAU,gBAAgBC,KAAK,GAAGG,IAAI,SACvC,uBAAGJ,UAAU,eACb,iDAEF,4BAAQA,UAAU,8BAA8BY,KAAK,SAASP,QA7CtE,WACE,IAAIC,EAAUC,SAASC,cAAc,mBAC1BD,SAASC,cAAc,YAC7BC,UAAUK,OAAO,WACtBR,EAAQG,UAAUK,OAAO,eA0CjB,uBAAGd,UAAU,oB,MCxCVe,MARf,WACE,OACE,yBAAKf,UAAU,OACb,kBAAC,EAAD,QCIcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhB,SAASiB,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7437e817.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.180d54b8.svg\";","import React from 'react';\r\nimport logo from '../images/logo.svg';\r\n\r\n\r\nimport '../sass/_header.scss';\r\n\r\nfunction Header() {\r\n  function toggleMenu() {\r\n    let menuBtn = document.querySelector('.fn_menutrigger');\r\n    let menu = document.querySelector('.fn_menu')\r\n    menu.classList.toggle('is-open')\r\n    menuBtn.classList.toggle('is-active')\r\n  }\r\n  function closeMenu() {\r\n    let menuBtn = document.querySelector('.fn_menutrigger');\r\n    let menu = document.querySelector('.fn_menu')\r\n    menu.classList.remove('is-open')\r\n    menuBtn.classList.remove('is-active')\r\n  }\r\n  return(\r\n    <header className=\"header\">\r\n      <div className=\"container\">\r\n        <div className=\"header__wrap\">\r\n          <div className=\"header__logo\" href=\"\">\r\n            <img src={logo} className=\"header__logo-img\" alt=\"logo\" />\r\n            <span className=\"header__logo-name\">SOCIAL</span>\r\n          </div>\r\n          <nav className=\"menu fn_menu\">\r\n            <a className=\"menu__close fn_menu_close\" onClick={closeMenu}>\r\n              <span>Close</span>\r\n              <i className=\"fa fa-times\"></i>\r\n            </a>\r\n            <div className=\"menu__list\">\r\n              <a className=\"menu__list-item active\" href=\"#\"> Home</a>\r\n              <a className=\"menu__list-item\" href=\"#\">Contact</a>\r\n              <a className=\"menu__list-item\" href=\"#\">About</a>\r\n              <a className=\"menu__list-item\" href=\"#\">News</a>\r\n            </div>\r\n          </nav>\r\n          <div className=\"header__search\">\r\n            <div className=\"header__search-trigger\">\r\n              <i className=\"fa fa-fw fa-search\"></i>\r\n            </div>\r\n            <form action=\"#\" className=\"search\">\r\n              <input className=\"search__input\" type=\"text\" placeholder=\"Search..\"/>\r\n              <i className=\"fa fa-fw fa-search\"></i>\r\n            </form>\r\n          </div>\r\n          <a className=\"header__login\" href=\"\" alt=\"LogIn\">\r\n            <i className=\"fa fa-user\"></i>\r\n            <span>Login|Register</span>\r\n          </a>\r\n          <button className=\"header__menu fn_menutrigger\" type=\"button\" onClick={toggleMenu}>\r\n            <i className=\"fa fa-bars\"></i>\r\n          </button>\r\n        </div>\r\n     \r\n      </div>\r\n     \r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\nimport Header from './components/js/Header';\n\nimport './components/sass/styles.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport '../node_modules/font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}